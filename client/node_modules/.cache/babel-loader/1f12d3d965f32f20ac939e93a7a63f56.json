{"ast":null,"code":"var _jsxFileName = \"/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Output.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Container } from 'react-bootstrap';\nimport Chart from './Chart';\nimport { Table, TableBody, TableCell, TableContainer, TableRow, Paper } from '@material-ui/core';\n\nfunction to2dp(x) {\n  return Number.parseFloat(x).toLocaleString('en-US');\n}\n\nfunction formatDate(dateString) {\n  if (dateString) {\n    const d = new Date(dateString);\n    const dtf = new Intl.DateTimeFormat('en', {\n      year: '2-digit',\n      month: 'short',\n      day: '2-digit'\n    });\n    const [{\n      value: mo\n    },, {\n      value: da\n    },, {\n      value: ye\n    }] = dtf.formatToParts(d);\n    return `${da} ${mo} ${ye}`;\n  } else {\n    return undefined;\n  }\n}\n\nexport default class Output extends Component {\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n  }\n\n  render() {\n    const {\n      results,\n      resources,\n      newly_infected,\n      measureWeeks,\n      dates\n    } = this.props;\n    const outputData = {\n      summary: [{\n        title: 'Did the pandemic end in 6 months?',\n        data: results.pandemic_end ? \"Yes\" : \"No\"\n      }, {\n        title: 'Peak of pandemic',\n        data: formatDate(results.pandemic_peak)\n      }, {\n        title: 'Daily infections at peak',\n        data: results.daily_infection_rate_at_peak\n      }, {\n        title: 'Total weeks of action',\n        data: results.total_weeks_action\n      }, {\n        title: 'Average R0',\n        data: to2dp(results.average_R0)\n      }],\n      population: [{\n        title: 'Total infected over 6 months',\n        data: results.total_infected\n      }, {\n        title: 'Total saved (not infected) over 6 months',\n        data: results.total_saved\n      }, {\n        title: 'Percentage of population infected',\n        data: to2dp(results.percentage_infected)\n      }, {\n        title: 'Total hospitalised over 6 months',\n        data: results.total_hospitalised\n      }, {\n        title: 'Total in ICU over 6 months',\n        data: results.total_received_icu\n      }, {\n        title: 'Total ventilated over 6 months',\n        data: results.total_received_vent\n      }, {\n        title: 'Total deceased over 6 months',\n        data: results.total_deaths\n      }, {\n        title: 'Total deaths from hospital overload',\n        data: results.total_deaths_overload\n      }, {\n        title: 'Percentage of total deaths from hospital overload',\n        data: to2dp(results.percentage_deaths_overload)\n      }],\n      hospital: [{\n        title: 'Beds required at the peak',\n        data: results.hbeds_req_peak\n      }, {\n        title: 'Shortfall of beds at the peak',\n        data: results.shortfall_hbeds_peak\n      }, {\n        title: 'When beds would run out (normal capacity)',\n        data: formatDate(results.hbeds_run_out_normal)\n      }, {\n        title: 'When beds would run out (surge capacity)',\n        data: formatDate(results.hbeds_run_out_surge)\n      }, {\n        title: 'How many days beds ran out for (surge capacity)',\n        data: results.days_hbed_out\n      }],\n      ICU: [{\n        title: 'ICU beds required at the peak',\n        data: results.icubeds_req_peak\n      }, {\n        title: 'Shortfall in ICU beds at peak',\n        data: results.shortfall_icubeds_peak\n      }, {\n        title: 'Number of patients who missed out on an ICU bed',\n        data: results.patients_missed_out_icubeds\n      }, {\n        title: 'When ICU beds would run out (normal capacity)',\n        data: formatDate(results.icubeds_run_out_normal)\n      }, {\n        title: 'When ICU beds would run out (surge capacity)',\n        data: formatDate(results.icubeds_run_out_surge)\n      }, {\n        title: 'How many days ICU beds ran out for (surge capacity)',\n        data: results.days_icubed_out\n      }],\n      ventilators: [{\n        title: 'Ventilators required at the peak',\n        data: results.vents_req_peak\n      }, {\n        title: 'Shortfall in ventilators at peak',\n        data: results.shortfall_vents_peak\n      }, {\n        title: 'Number of patients who missed out on a ventilator',\n        data: results.patients_missed_out_ventilators\n      }, {\n        title: 'When ventilators would run out (normal capacity)',\n        data: formatDate(results.vents_run_out_normal)\n      }, {\n        title: 'When ventilators would run out (surge capacity)',\n        data: formatDate(results.vents_run_out_surge)\n      }, {\n        title: 'How many days ventilators ran out for (surge capacity)',\n        data: results.days_vents_out\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      style: {\n        padding: 20,\n        paddingTop: 80\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fixed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"Measures\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 51\n      }\n    }, \"Model Data\")), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        justifyContent: \"center\",\n        height: \"100%\"\n      },\n      className: \"align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      resources: resources,\n      measureWeeks: measureWeeks,\n      newly_infected: newly_infected,\n      dates: dates,\n      ref: this.chartComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: \"left\"\n      },\n      lg: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }, \"Key Statistics\"), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }, \"What happened?\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, outputData.summary.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 33\n      }\n    }, row.data)))))), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }, \"Population Totals\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, outputData.population.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 33\n      }\n    }, row.data)))))), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }, \"Hospital Beds\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 25\n      }\n    }, outputData.hospital.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 33\n      }\n    }, row.data)))))), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }, \"ICU Beds\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 25\n      }\n    }, outputData.ICU.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 33\n      }\n    }, row.data)))))), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, \"Ventilators\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 25\n      }\n    }, outputData.ventilators.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 33\n      }\n    }, row.data))))))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Output.js"],"names":["React","Component","Row","Col","Container","Chart","Table","TableBody","TableCell","TableContainer","TableRow","Paper","to2dp","x","Number","parseFloat","toLocaleString","formatDate","dateString","d","Date","dtf","Intl","DateTimeFormat","year","month","day","value","mo","da","ye","formatToParts","undefined","Output","constructor","props","chartComponent","createRef","render","results","resources","newly_infected","measureWeeks","dates","outputData","summary","title","data","pandemic_end","pandemic_peak","daily_infection_rate_at_peak","total_weeks_action","average_R0","population","total_infected","total_saved","percentage_infected","total_hospitalised","total_received_icu","total_received_vent","total_deaths","total_deaths_overload","percentage_deaths_overload","hospital","hbeds_req_peak","shortfall_hbeds_peak","hbeds_run_out_normal","hbeds_run_out_surge","days_hbed_out","ICU","icubeds_req_peak","shortfall_icubeds_peak","patients_missed_out_icubeds","icubeds_run_out_normal","icubeds_run_out_surge","days_icubed_out","ventilators","vents_req_peak","shortfall_vents_peak","patients_missed_out_ventilators","vents_run_out_normal","vents_run_out_surge","days_vents_out","padding","paddingTop","justifyContent","height","textAlign","map","row","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport Chart from './Chart';\r\n\r\nimport { Table, TableBody, TableCell, TableContainer, TableRow, Paper } from '@material-ui/core';\r\n\r\nfunction to2dp(x) {\r\n    return Number.parseFloat(x).toLocaleString('en-US');\r\n}\r\n\r\nfunction formatDate(dateString) {\r\n    if (dateString) {\r\n        const d = new Date(dateString);\r\n        const dtf = new Intl.DateTimeFormat('en', { year: '2-digit', month: 'short', day: '2-digit' });\r\n        const [{ value: mo },,{ value: da },,{ value: ye }] = dtf.formatToParts(d);\r\n    \r\n        return `${da} ${mo} ${ye}`;\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport default class Output extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.chartComponent = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        const { results, resources, newly_infected, measureWeeks, dates } = this.props;\r\n        const outputData = {\r\n            summary: [{\r\n                title: 'Did the pandemic end in 6 months?',\r\n                data: results.pandemic_end ? \"Yes\" : \"No\"\r\n            }, {\r\n                title: 'Peak of pandemic',\r\n                data: formatDate(results.pandemic_peak)\r\n            }, {\r\n                title: 'Daily infections at peak',\r\n                data: results.daily_infection_rate_at_peak\r\n            }, {\r\n                title: 'Total weeks of action',\r\n                data: results.total_weeks_action\r\n            }, {\r\n                title: 'Average R0',\r\n                data: to2dp(results.average_R0)\r\n            }],\r\n            population: [{\r\n                title: 'Total infected over 6 months',\r\n                data: results.total_infected\r\n            }, {\r\n                title: 'Total saved (not infected) over 6 months',\r\n                data: results.total_saved\r\n            }, {\r\n                title: 'Percentage of population infected',\r\n                data: to2dp(results.percentage_infected)\r\n            }, {\r\n                title: 'Total hospitalised over 6 months',\r\n                data: results.total_hospitalised\r\n            }, {\r\n                title: 'Total in ICU over 6 months',\r\n                data: results.total_received_icu\r\n            }, {\r\n                title: 'Total ventilated over 6 months',\r\n                data: results.total_received_vent\r\n            }, {\r\n                title: 'Total deceased over 6 months',\r\n                data: results.total_deaths\r\n            }, {\r\n                title: 'Total deaths from hospital overload',\r\n                data: results.total_deaths_overload\r\n            }, {\r\n                title: 'Percentage of total deaths from hospital overload',\r\n                data: to2dp(results.percentage_deaths_overload)\r\n            }],\r\n            hospital: [{\r\n                title: 'Beds required at the peak',\r\n                data: results.hbeds_req_peak\r\n            }, {\r\n                title: 'Shortfall of beds at the peak',\r\n                data: results.shortfall_hbeds_peak\r\n            }, {\r\n                title: 'When beds would run out (normal capacity)',\r\n                data: formatDate(results.hbeds_run_out_normal)\r\n            }, {\r\n                title: 'When beds would run out (surge capacity)',\r\n                data: formatDate(results.hbeds_run_out_surge)\r\n            }, {\r\n                title: 'How many days beds ran out for (surge capacity)',\r\n                data: results.days_hbed_out\r\n            }],\r\n            ICU: [{\r\n                title: 'ICU beds required at the peak',\r\n                data: results.icubeds_req_peak\r\n            }, {\r\n                title: 'Shortfall in ICU beds at peak',\r\n                data: results.shortfall_icubeds_peak\r\n            }, {\r\n                title: 'Number of patients who missed out on an ICU bed',\r\n                data: results.patients_missed_out_icubeds\r\n            }, {\r\n                title: 'When ICU beds would run out (normal capacity)',\r\n                data: formatDate(results.icubeds_run_out_normal)\r\n            }, {\r\n                title: 'When ICU beds would run out (surge capacity)',\r\n                data: formatDate(results.icubeds_run_out_surge)\r\n            }, {\r\n                title: 'How many days ICU beds ran out for (surge capacity)',\r\n                data: results.days_icubed_out\r\n            }],\r\n            ventilators: [{\r\n                title: 'Ventilators required at the peak',\r\n                data: results.vents_req_peak\r\n            }, {\r\n                title: 'Shortfall in ventilators at peak',\r\n                data: results.shortfall_vents_peak\r\n            }, {\r\n                title: 'Number of patients who missed out on a ventilator',\r\n                data: results.patients_missed_out_ventilators\r\n            }, {\r\n                title: 'When ventilators would run out (normal capacity)',\r\n                data: formatDate(results.vents_run_out_normal)\r\n            }, {\r\n                title: 'When ventilators would run out (surge capacity)',\r\n                data: formatDate(results.vents_run_out_surge)\r\n            }, {\r\n                title: 'How many days ventilators ran out for (surge capacity)',\r\n                data: results.days_vents_out\r\n            }]\r\n        }\r\n        return(\r\n            <div>\r\n            { <Container fluid style={{ padding: 20, paddingTop: 80 }}>\r\n                <Row>\r\n                <Col lg={8}>\r\n                    <div className=\"fixed\">\r\n                        <Row className=\"Measures\"><h4>Model Data</h4></Row>\r\n                        <Row style={{ justifyContent: \"center\", height: \"100%\" }} className=\"align-items-center\">\r\n                            <Chart \r\n                            resources={resources} \r\n                            measureWeeks={measureWeeks} \r\n                            newly_infected={newly_infected} \r\n                            dates={dates}\r\n                            ref={this.chartComponent}/>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n                <Col style={{ textAlign: \"left\" }} lg={4}>\r\n                    <h4>Key Statistics</h4>\r\n                    <h5 className=\"Stats-Category\">What happened?</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.summary.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    <h5 className=\"Stats-Category\">Population Totals</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.population.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    <h5 className=\"Stats-Category\">Hospital Beds</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.hospital.map((row, index)  => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    <h5 className=\"Stats-Category\">ICU Beds</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.ICU.map((row, index)  => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    <h5 className=\"Stats-Category\">Ventilators</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.ventilators.map((row, index)  => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                </Col>\r\n                </Row>\r\n            </Container>}\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}