{"ast":null,"code":"var _jsxFileName = \"/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Chart.js\";\nimport React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nrequire(\"highcharts/modules/exporting\")(Highcharts);\n\nrequire(\"highcharts/modules/data\")(Highcharts);\n\nexport default class Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n  }\n\n  componentDidMount() {\n    const container = this.chartComponent.current.container.current;\n    container.style.height = \"100%\";\n    container.style.width = \"100%\";\n    this.chartComponent.current.chart.reflow();\n  }\n\n  render() {\n    const {\n      newly_infected,\n      resources,\n      measureWeeks,\n      dates\n    } = this.props;\n    const {\n      numHospBeds,\n      numICUBeds,\n      numVents\n    } = resources; // Compute weeks\n\n    const [doNothing, socDist, relaxedLD, sigLD, critLD] = measureWeeks;\n    const data = dates.map((dateString, index) => {\n      var dateArray = dateString.split(\"-\").map(Number);\n      dateArray[1] -= 1;\n      const date = Date.UTC(dateArray[0], dateArray[1], dateArray[2]);\n      return [date, newly_infected[index]];\n    });\n    const startDoNothing = data[0][0];\n    var accumWeeks = Number(doNothing);\n    const startSocDist = data[Math.max(Math.round(accumWeeks * 7 / 4) - 1, 0)][0];\n    accumWeeks += Number(socDist);\n    const startRelaxedLD = data[Math.max(Math.round(accumWeeks * 7 / 4 - 1), 0)][0];\n    accumWeeks += Number(relaxedLD);\n    const startSigLD = data[Math.max(Math.round(accumWeeks * 7 / 4 - 1), 0)][0];\n    accumWeeks += Number(sigLD);\n    const startCritLD = data[Math.max(Math.round(accumWeeks * 7 / 4 - 1), 0)][0];\n    accumWeeks += Number(critLD);\n    const endCritLD = data[Math.max(Math.round(accumWeeks * 7 / 4 - 1), 0)][0];\n    const options = {\n      chart: {\n        type: 'line'\n      },\n      title: {\n        text: 'Newly Infected Over Time'\n      },\n      // data: {\n      //     googleSpreadsheetKey: '12Ldo5cwQMCu1Aka2p0nCCvajjYlXQ_ags1OtwHOyKeM'\n      // },\n      xAxis: {\n        type: 'datetime',\n        // plotLines: [{\n        //     color: doNothing ? 'rgba(210,108,103,1)' : 'white',\n        //     value: startDoNothing,\n        //     // label: {\n        //     //     text: 'Do Nothing',\n        //     //     align: 'center',\n        //     //     y: -30,\n        //     //     rotation: 0\n        //     // }\n        // }, {\n        //     color: socDist ? '#df9c99' : 'white',\n        //     value: startSocDist,\n        //     // label: {\n        //     //     text: 'Social Distancing',\n        //     //     align: 'center',\n        //     //     y: -60,\n        //     //     rotation: 0\n        //     // }\n        // }, {\n        //     color: relaxedLD ? '#fbe69f' : 'white',\n        //     value: startRelaxedLD,\n        //     // label: {\n        //     //     text: 'Relaxed Lockdown',\n        //     //     align: 'center',\n        //     //     y: -30,\n        //     //     rotation: 0\n        //     // }\n        // }, {\n        //     color: sigLD ? '#bdd6ab' : 'white',\n        //     value: startSigLD,\n        //     // label: {\n        //     //     text: 'Significant Lockdown',\n        //     //     align: 'center',\n        //     //     y: -60,\n        //     //     rotation: 0\n        //     // }\n        // }, {\n        //     color: critLD ? '#9cc381' : 'white',\n        //     value: startCritLD,\n        //     // label: {\n        //     //     text: 'Critical Lockdown',\n        //     //     align: 'center',\n        //     //     y: -30,\n        //     //     rotation: 0\n        //     // }\n        // }],\n        plotBands: [{\n          color: doNothing ? 'rgba(210,108,103,0.2)' : 'white',\n          from: startDoNothing,\n          to: startSocDist // label: {\n          //     text: doNothing ? 'Do Nothing' : '',\n          //     align: 'center'\n          // }\n\n        }, {\n          color: socDist ? 'rgba(223,156,153,0.2)' : 'white',\n          from: startSocDist,\n          to: startRelaxedLD // label: {\n          //     text: socDist ? 'Social Distancing': '',\n          //     align: 'center'\n          // }\n\n        }, {\n          color: relaxedLD ? 'rgba(251,230,159,0.2)' : 'white',\n          from: startRelaxedLD,\n          to: startSigLD // label: {\n          //     text: relaxedLD ? 'Relaxed Lockdown' : '',\n          //     align: 'center'\n          // }\n\n        }, {\n          color: sigLD ? 'rgba(189,214,171,0.2)' : 'white',\n          from: startSigLD,\n          to: startCritLD // label: {\n          //     text: sigLD ? 'Significant Lockdown' : '',\n          //     align: 'center'\n          // }\n\n        }, {\n          color: critLD ? 'rgba(156,195,129,0.2)' : 'white',\n          from: startCritLD,\n          to: endCritLD // label: {\n          //     text: critLD ? 'Critical Lockdown' : '',\n          //     align: 'center'\n          // }\n\n        }]\n      },\n      yAxis: {\n        title: {\n          text: 'Newly Infected'\n        },\n        plotLines: [{\n          color: 'black',\n          // Color value\n          //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\n          value: numHospBeds,\n          // Value of where the line will appear\n          width: 1,\n          // Width of the line    \n          label: {\n            text: 'Number of Hospital Beds',\n            // Content of the label. \n            align: 'left' // Positioning of the label. \n            // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \n\n          }\n        }, {\n          color: 'red',\n          // Color value\n          //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\n          value: numICUBeds,\n          // Value of where the line will appear\n          width: 1,\n          // Width of the line    \n          label: {\n            text: 'Number of ICU Beds',\n            // Content of the label. \n            align: 'left' // Positioning of the label. \n            // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \n\n          }\n        }, {\n          color: 'blue',\n          // Color value\n          //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\n          value: numVents,\n          // Value of where the line will appear\n          width: 1,\n          // Width of the line    \n          label: {\n            text: 'Number of Ventilators',\n            // Content of the label. \n            align: 'right' // Positioning of the label. \n            // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \n\n          }\n        }]\n      },\n      plotOptions: {\n        series: {\n          marker: {\n            enabled: false\n          }\n        }\n      },\n      series: [{\n        name: \"Newly Infected\",\n        data: data\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: options,\n      ref: this.chartComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Chart.js"],"names":["React","Component","Highcharts","HighchartsReact","require","Chart","constructor","props","chartComponent","createRef","componentDidMount","container","current","style","height","width","chart","reflow","render","newly_infected","resources","measureWeeks","dates","numHospBeds","numICUBeds","numVents","doNothing","socDist","relaxedLD","sigLD","critLD","data","map","dateString","index","dateArray","split","Number","date","Date","UTC","startDoNothing","accumWeeks","startSocDist","Math","max","round","startRelaxedLD","startSigLD","startCritLD","endCritLD","options","type","title","text","xAxis","plotBands","color","from","to","yAxis","plotLines","value","label","align","plotOptions","series","marker","enabled","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nrequire(\"highcharts/modules/exporting\")(Highcharts);\r\nrequire(\"highcharts/modules/data\")(Highcharts);\r\n\r\nexport default class Chart extends Component {\r\n    constructor(props) {\r\n        super(props);       this.chartComponent = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n      const container = this.chartComponent.current.container.current;\r\n  \r\n      container.style.height = \"100%\";\r\n      container.style.width = \"100%\";\r\n      this.chartComponent.current.chart.reflow();\r\n    }\r\n\r\n    render() {\r\n        const { newly_infected, resources, measureWeeks, dates } = this.props;\r\n        const { numHospBeds, numICUBeds, numVents } = resources;\r\n        \r\n        // Compute weeks\r\n        const [ doNothing, socDist, relaxedLD, sigLD, critLD ] = measureWeeks;\r\n        \r\n        const data = dates.map((dateString, index) => {\r\n            var dateArray = dateString.split(\"-\").map(Number);\r\n            dateArray[1] -= 1;\r\n            const date = Date.UTC(dateArray[0], dateArray[1], dateArray[2]);\r\n            return [date, newly_infected[index]];\r\n        });\r\n\r\n        const startDoNothing = data[0][0];\r\n        var accumWeeks = Number(doNothing);\r\n        const startSocDist = data[Math.max(Math.round(accumWeeks * 7 / 4) - 1, 0)][0];\r\n        accumWeeks += Number(socDist);\r\n        const startRelaxedLD = data[Math.max(Math.round(accumWeeks * 7 / 4 - 1), 0)][0];\r\n        accumWeeks += Number(relaxedLD);\r\n        const startSigLD = data[Math.max(Math.round(accumWeeks * 7 / 4 - 1), 0)][0];\r\n        accumWeeks += Number(sigLD);\r\n        const startCritLD = data[Math.max(Math.round(accumWeeks * 7 / 4 - 1), 0)][0];\r\n        accumWeeks += Number(critLD);\r\n        const endCritLD = data[Math.max(Math.round(accumWeeks * 7 / 4 - 1), 0)][0];\r\n\r\n        const options = {\r\n            chart: {\r\n                type: 'line'\r\n            },\r\n            title: {\r\n                text: 'Newly Infected Over Time'\r\n            },\r\n            // data: {\r\n            //     googleSpreadsheetKey: '12Ldo5cwQMCu1Aka2p0nCCvajjYlXQ_ags1OtwHOyKeM'\r\n            // },\r\n            xAxis: {\r\n                type: 'datetime',\r\n                // plotLines: [{\r\n                //     color: doNothing ? 'rgba(210,108,103,1)' : 'white',\r\n                //     value: startDoNothing,\r\n                //     // label: {\r\n                //     //     text: 'Do Nothing',\r\n                //     //     align: 'center',\r\n                //     //     y: -30,\r\n                //     //     rotation: 0\r\n                //     // }\r\n                // }, {\r\n                //     color: socDist ? '#df9c99' : 'white',\r\n                //     value: startSocDist,\r\n                //     // label: {\r\n                //     //     text: 'Social Distancing',\r\n                //     //     align: 'center',\r\n                //     //     y: -60,\r\n                //     //     rotation: 0\r\n                //     // }\r\n                // }, {\r\n                //     color: relaxedLD ? '#fbe69f' : 'white',\r\n                //     value: startRelaxedLD,\r\n                //     // label: {\r\n                //     //     text: 'Relaxed Lockdown',\r\n                //     //     align: 'center',\r\n                //     //     y: -30,\r\n                //     //     rotation: 0\r\n                //     // }\r\n                // }, {\r\n                //     color: sigLD ? '#bdd6ab' : 'white',\r\n                //     value: startSigLD,\r\n                //     // label: {\r\n                //     //     text: 'Significant Lockdown',\r\n                //     //     align: 'center',\r\n                //     //     y: -60,\r\n                //     //     rotation: 0\r\n                //     // }\r\n                // }, {\r\n                //     color: critLD ? '#9cc381' : 'white',\r\n                //     value: startCritLD,\r\n                //     // label: {\r\n                //     //     text: 'Critical Lockdown',\r\n                //     //     align: 'center',\r\n                //     //     y: -30,\r\n                //     //     rotation: 0\r\n                //     // }\r\n                // }],\r\n                plotBands: [{\r\n                    color: doNothing ? 'rgba(210,108,103,0.2)' : 'white',\r\n                    from: startDoNothing,\r\n                    to: startSocDist,\r\n                    // label: {\r\n                    //     text: doNothing ? 'Do Nothing' : '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }, {\r\n                    color: socDist ? 'rgba(223,156,153,0.2)' : 'white',\r\n                    from: startSocDist,\r\n                    to: startRelaxedLD,\r\n                    // label: {\r\n                    //     text: socDist ? 'Social Distancing': '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }, {\r\n                    color: relaxedLD ? 'rgba(251,230,159,0.2)' : 'white',\r\n                    from: startRelaxedLD,\r\n                    to: startSigLD,\r\n                    // label: {\r\n                    //     text: relaxedLD ? 'Relaxed Lockdown' : '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }, {\r\n                    color: sigLD ? 'rgba(189,214,171,0.2)' : 'white',\r\n                    from: startSigLD,\r\n                    to: startCritLD,\r\n                    // label: {\r\n                    //     text: sigLD ? 'Significant Lockdown' : '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }, {\r\n                    color: critLD ? 'rgba(156,195,129,0.2)' : 'white',\r\n                    from: startCritLD,\r\n                    to: endCritLD,\r\n                    // label: {\r\n                    //     text: critLD ? 'Critical Lockdown' : '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }]\r\n\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Newly Infected'\r\n                },\r\n                plotLines: [{\r\n                    color: 'black', // Color value\r\n                    //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\r\n                    value: numHospBeds, // Value of where the line will appear\r\n                    width: 1, // Width of the line    \r\n                    label: { \r\n                        text: 'Number of Hospital Beds', // Content of the label. \r\n                        align: 'left', // Positioning of the label. \r\n                    // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \r\n                    }\r\n                }, {\r\n                    color: 'red', // Color value\r\n                    //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\r\n                    value: numICUBeds, // Value of where the line will appear\r\n                    width: 1, // Width of the line    \r\n                    label: { \r\n                        text: 'Number of ICU Beds', // Content of the label. \r\n                        align: 'left', // Positioning of the label. \r\n                    // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \r\n                    }\r\n                }, {\r\n                    color: 'blue', // Color value\r\n                    //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\r\n                    value: numVents, // Value of where the line will appear\r\n                    width: 1, // Width of the line    \r\n                    label: { \r\n                        text: 'Number of Ventilators', // Content of the label. \r\n                        align: 'right', // Positioning of the label. \r\n                    // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \r\n                    }\r\n                }]\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    marker: {\r\n                        enabled: false\r\n                    }\r\n                }\r\n            },\r\n            series: [{\r\n                name: \"Newly Infected\",\r\n                data: data\r\n            }]\r\n        };\r\n\r\n        return (\r\n            <div style={{ width: \"100%\", height: \"100%\" }}>\r\n                <HighchartsReact highcharts={Highcharts} options={options} ref={this.chartComponent}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}