{"ast":null,"code":"var _jsxFileName = \"/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Output.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Container } from 'react-bootstrap';\nimport Chart from './Chart';\nimport { Table, TableBody, TableCell, TableContainer, TableRow, Paper } from '@material-ui/core';\n\nfunction to2dp(x) {\n  return Number.parseFloat(x).toFixed(2);\n}\n\nfunction addComma(x) {\n  return Number(x).toLocaleString('en-US');\n}\n\nfunction toPercent(x) {\n  return (Number(x) * 100).toFixed() + '%';\n}\n\nfunction toDays(x) {\n  return Number(x) + ' days';\n}\n\nfunction formatDate(dateString) {\n  if (dateString) {\n    const d = new Date(dateString);\n    const dtf = new Intl.DateTimeFormat('en', {\n      year: '2-digit',\n      month: 'short',\n      day: '2-digit'\n    });\n    const [{\n      value: mo\n    },, {\n      value: da\n    },, {\n      value: ye\n    }] = dtf.formatToParts(d);\n    return `${da} ${mo} ${ye}`;\n  } else {\n    return undefined;\n  }\n}\n\nexport default class Output extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      results,\n      resources,\n      newly_infected,\n      measureWeeks,\n      dates,\n      region,\n      currentTab,\n      hbeds_required,\n      icubeds_required,\n      vents_required,\n      barHeight\n    } = this.props;\n    const outputData = {\n      summary: [{\n        title: 'Did the pandemic end in 6 months?',\n        data: results.pandemic_end ? \"Yes\" : \"No\"\n      }, {\n        title: 'Peak of pandemic',\n        data: formatDate(results.pandemic_peak)\n      }, {\n        title: 'Daily infections at peak',\n        data: addComma(Number(results.daily_infection_rate_at_peak).toFixed())\n      }, {\n        title: 'Average R0',\n        data: to2dp(results.average_R0)\n      }],\n      population: [{\n        title: 'Total deceased',\n        data: addComma(results.total_deaths)\n      }, {\n        title: 'Total deceased (from health system overload)',\n        data: addComma(results.total_deaths_overload)\n      }, {\n        title: 'Total infected',\n        data: addComma(results.total_infected)\n      }, {\n        title: 'Total hospitalised',\n        data: addComma(results.total_hospitalised)\n      }, {\n        title: 'Total intensive cared',\n        data: addComma(results.total_received_icu)\n      }, {\n        title: 'Total ventilated',\n        data: addComma(results.total_received_vent)\n      }, {\n        title: 'Percentage of deaths attributed to hospital overload',\n        data: toPercent(to2dp(results.percentage_deaths_overload))\n      }, {\n        title: 'Percentage of total population infected',\n        data: toPercent(to2dp(results.percentage_infected))\n      }],\n      hospital: [{\n        title: 'Beds required at peak',\n        data: addComma(results.hbeds_req_peak)\n      }, {\n        title: 'Shortfall of beds at peak',\n        data: addComma(results.shortfall_hbeds_peak)\n      }, {\n        title: 'When beds ran out (normal capacity)',\n        data: results.days_hbed_out_normal ? formatDate(results.hbeds_run_out_normal) : \"N/A\"\n      }, {\n        title: 'When beds ran out (surge capacity)',\n        data: results.days_hbed_out_surge ? formatDate(results.hbeds_run_out_surge) : \"N/A\"\n      }, {\n        title: 'How many days beds ran out for (surge capacity)',\n        data: toDays(results.days_hbed_out_surge)\n      }],\n      ICU: [{\n        title: 'ICU beds required at peak',\n        data: addComma(results.icubeds_req_peak)\n      }, {\n        title: 'Shortfall in ICU beds at peak',\n        data: addComma(results.shortfall_icubeds_peak)\n      }, {\n        title: 'Number of patients who missed out on an ICU bed',\n        data: addComma(results.patients_missed_out_icubeds)\n      }, {\n        title: 'When ICU beds ran out (normal capacity)',\n        data: results.days_icubed_out_normal ? formatDate(results.icubeds_run_out_normal) : \"N/A\"\n      }, {\n        title: 'When ICU beds ran out (surge capacity)',\n        data: results.days_icubed_out_surge ? formatDate(results.icubeds_run_out_surge) : \"N/A\"\n      }, {\n        title: 'How many days ICU beds ran out for (surge capacity)',\n        data: toDays(results.days_icubed_out_surge)\n      }],\n      ventilators: [{\n        title: 'Ventilators required at peak',\n        data: addComma(results.vents_req_peak)\n      }, {\n        title: 'Shortfall in ventilators at peak',\n        data: addComma(results.shortfall_vents_peak)\n      }, {\n        title: 'Number of patients who missed out on a ventilator',\n        data: addComma(results.patients_missed_out_ventilators)\n      }, {\n        title: 'When ventilators ran out (normal capacity)',\n        data: results.days_vents_out_normal ? formatDate(results.vents_run_out_normal) : \"N/A\"\n      }, {\n        title: 'When ventilators ran out (surge capacity)',\n        data: results.days_vents_out_surge ? formatDate(results.vents_run_out_surge) : \"N/A\"\n      }, {\n        title: 'How many days ventilators ran out for (surge capacity)',\n        data: toDays(results.days_vents_out_surge)\n      }]\n    };\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      style: {\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingBottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Chart\",\n      style: {\n        position: \"sticky\",\n        top: barHeight ? 20 + barHeight : 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"Measures\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 51\n      }\n    }, \"Model \", region.country !== \"\" ? \"(\" + (region.state === \"\" ? region.country : region.country + \", \" + region.state) + \")\" : \"\")), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        justifyContent: \"center\",\n        height: \"100%\"\n      },\n      className: \"align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      currentTab: currentTab,\n      resources: resources,\n      measureWeeks: measureWeeks,\n      newly_infected: newly_infected,\n      hbeds_required: hbeds_required,\n      icubeds_required: icubeds_required,\n      vents_required: vents_required,\n      dates: dates,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 29\n      }\n    })))), results.total_weeks_action && /*#__PURE__*/React.createElement(Col, {\n      className: \"stats\",\n      style: {\n        textAlign: \"left\"\n      },\n      lg: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 48\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, \"Key Statistics\"), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }, \"What happened?\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }\n    }, outputData.summary.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 33\n      }\n    }, row.data)))))), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }\n    }, \"Population Totals\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }, outputData.population.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 33\n      }\n    }, row.data)))))), currentTab === 1 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 42\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, \"Hospital Beds\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }, outputData.hospital.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 33\n      }\n    }, row.data))))))), currentTab === 2 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 42\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, \"ICU Beds\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    }, outputData.ICU.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 33\n      }\n    }, row.data))))))), currentTab === 3 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 42\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"Stats-Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }, \"Ventilators\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 25\n      }\n    }, outputData.ventilators.map((row, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 33\n      }\n    }, row.title), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 33\n      }\n    }, row.data))))))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Output.js"],"names":["React","Component","Row","Col","Container","Chart","Table","TableBody","TableCell","TableContainer","TableRow","Paper","to2dp","x","Number","parseFloat","toFixed","addComma","toLocaleString","toPercent","toDays","formatDate","dateString","d","Date","dtf","Intl","DateTimeFormat","year","month","day","value","mo","da","ye","formatToParts","undefined","Output","constructor","props","render","results","resources","newly_infected","measureWeeks","dates","region","currentTab","hbeds_required","icubeds_required","vents_required","barHeight","outputData","summary","title","data","pandemic_end","pandemic_peak","daily_infection_rate_at_peak","average_R0","population","total_deaths","total_deaths_overload","total_infected","total_hospitalised","total_received_icu","total_received_vent","percentage_deaths_overload","percentage_infected","hospital","hbeds_req_peak","shortfall_hbeds_peak","days_hbed_out_normal","hbeds_run_out_normal","days_hbed_out_surge","hbeds_run_out_surge","ICU","icubeds_req_peak","shortfall_icubeds_peak","patients_missed_out_icubeds","days_icubed_out_normal","icubeds_run_out_normal","days_icubed_out_surge","icubeds_run_out_surge","ventilators","vents_req_peak","shortfall_vents_peak","patients_missed_out_ventilators","days_vents_out_normal","vents_run_out_normal","days_vents_out_surge","vents_run_out_surge","paddingLeft","paddingRight","paddingBottom","position","top","country","state","justifyContent","height","total_weeks_action","textAlign","map","row","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,iBAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,cAAtC,EAAsDC,QAAtD,EAAgEC,KAAhE,QAA6E,mBAA7E;;AAEA,SAASC,KAAT,CAAeC,CAAf,EAAkB;AACd,SAAOC,MAAM,CAACC,UAAP,CAAkBF,CAAlB,EAAqBG,OAArB,CAA6B,CAA7B,CAAP;AACH;;AAED,SAASC,QAAT,CAAkBJ,CAAlB,EAAqB;AACjB,SAAOC,MAAM,CAACD,CAAD,CAAN,CAAUK,cAAV,CAAyB,OAAzB,CAAP;AACH;;AAED,SAASC,SAAT,CAAmBN,CAAnB,EAAsB;AAClB,SAAO,CAACC,MAAM,CAACD,CAAD,CAAN,GAAY,GAAb,EAAkBG,OAAlB,KAA8B,GAArC;AACH;;AAED,SAASI,MAAT,CAAgBP,CAAhB,EAAmB;AACf,SAAOC,MAAM,CAACD,CAAD,CAAN,GAAY,OAAnB;AACH;;AAED,SAASQ,UAAT,CAAoBC,UAApB,EAAgC;AAC5B,MAAIA,UAAJ,EAAgB;AACZ,UAAMC,CAAC,GAAG,IAAIC,IAAJ,CAASF,UAAT,CAAV;AACA,UAAMG,GAAG,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,KAAK,EAAE,OAA1B;AAAmCC,MAAAA,GAAG,EAAE;AAAxC,KAA9B,CAAZ;AACA,UAAM,CAAC;AAAEC,MAAAA,KAAK,EAAEC;AAAT,KAAD,GAAgB;AAAED,MAAAA,KAAK,EAAEE;AAAT,KAAhB,GAA+B;AAAEF,MAAAA,KAAK,EAAEG;AAAT,KAA/B,IAAgDT,GAAG,CAACU,aAAJ,CAAkBZ,CAAlB,CAAtD;AAEA,WAAQ,GAAEU,EAAG,IAAGD,EAAG,IAAGE,EAAG,EAAzB;AACH,GAND,MAMO;AACH,WAAOE,SAAP;AACH;AACJ;;AAED,eAAe,MAAMC,MAAN,SAAqBpC,SAArB,CAA+B;AAC1CqC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA,cAAtB;AAAsCC,MAAAA,YAAtC;AAAoDC,MAAAA,KAApD;AAA2DC,MAAAA,MAA3D;AACFC,MAAAA,UADE;AACUC,MAAAA,cADV;AAC0BC,MAAAA,gBAD1B;AAC4CC,MAAAA,cAD5C;AAC4DC,MAAAA;AAD5D,QAC0E,KAAKZ,KADrF;AAEA,UAAMa,UAAU,GAAG;AACfC,MAAAA,OAAO,EAAE,CAAC;AACNC,QAAAA,KAAK,EAAE,mCADD;AAENC,QAAAA,IAAI,EAAEd,OAAO,CAACe,YAAR,GAAuB,KAAvB,GAA+B;AAF/B,OAAD,EAGN;AACCF,QAAAA,KAAK,EAAE,kBADR;AAECC,QAAAA,IAAI,EAAElC,UAAU,CAACoB,OAAO,CAACgB,aAAT;AAFjB,OAHM,EAMN;AACCH,QAAAA,KAAK,EAAE,0BADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACH,MAAM,CAAC2B,OAAO,CAACiB,4BAAT,CAAN,CAA6C1C,OAA7C,EAAD;AAFf,OANM,EASN;AACCsC,QAAAA,KAAK,EAAE,YADR;AAECC,QAAAA,IAAI,EAAE3C,KAAK,CAAC6B,OAAO,CAACkB,UAAT;AAFZ,OATM,CADM;AAcfC,MAAAA,UAAU,EAAE,CAAC;AACTN,QAAAA,KAAK,EAAE,gBADE;AAETC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAACoB,YAAT;AAFL,OAAD,EAGT;AACCP,QAAAA,KAAK,EAAE,8CADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAACqB,qBAAT;AAFf,OAHS,EAMT;AACCR,QAAAA,KAAK,EAAE,gBADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAACsB,cAAT;AAFf,OANS,EAST;AACCT,QAAAA,KAAK,EAAE,oBADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAACuB,kBAAT;AAFf,OATS,EAYT;AACCV,QAAAA,KAAK,EAAE,uBADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAACwB,kBAAT;AAFf,OAZS,EAeT;AACCX,QAAAA,KAAK,EAAE,kBADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAACyB,mBAAT;AAFf,OAfS,EAkBT;AACCZ,QAAAA,KAAK,EAAE,sDADR;AAECC,QAAAA,IAAI,EAAEpC,SAAS,CAACP,KAAK,CAAC6B,OAAO,CAAC0B,0BAAT,CAAN;AAFhB,OAlBS,EAqBT;AACCb,QAAAA,KAAK,EAAE,yCADR;AAECC,QAAAA,IAAI,EAAEpC,SAAS,CAACP,KAAK,CAAC6B,OAAO,CAAC2B,mBAAT,CAAN;AAFhB,OArBS,CAdG;AAuCfC,MAAAA,QAAQ,EAAE,CAAC;AACPf,QAAAA,KAAK,EAAE,uBADA;AAEPC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAAC6B,cAAT;AAFP,OAAD,EAGP;AACChB,QAAAA,KAAK,EAAE,2BADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAAC8B,oBAAT;AAFf,OAHO,EAMP;AACCjB,QAAAA,KAAK,EAAE,qCADR;AAECC,QAAAA,IAAI,EAAEd,OAAO,CAAC+B,oBAAR,GAA+BnD,UAAU,CAACoB,OAAO,CAACgC,oBAAT,CAAzC,GAA0E;AAFjF,OANO,EASP;AACCnB,QAAAA,KAAK,EAAE,oCADR;AAECC,QAAAA,IAAI,EAAEd,OAAO,CAACiC,mBAAR,GAA8BrD,UAAU,CAACoB,OAAO,CAACkC,mBAAT,CAAxC,GAAwE;AAF/E,OATO,EAYP;AACCrB,QAAAA,KAAK,EAAE,iDADR;AAECC,QAAAA,IAAI,EAAEnC,MAAM,CAACqB,OAAO,CAACiC,mBAAT;AAFb,OAZO,CAvCK;AAuDfE,MAAAA,GAAG,EAAE,CAAC;AACFtB,QAAAA,KAAK,EAAE,2BADL;AAEFC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAACoC,gBAAT;AAFZ,OAAD,EAGF;AACCvB,QAAAA,KAAK,EAAE,+BADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAACqC,sBAAT;AAFf,OAHE,EAMF;AACCxB,QAAAA,KAAK,EAAE,iDADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAACsC,2BAAT;AAFf,OANE,EASF;AACCzB,QAAAA,KAAK,EAAE,yCADR;AAECC,QAAAA,IAAI,EAAEd,OAAO,CAACuC,sBAAR,GAAiC3D,UAAU,CAACoB,OAAO,CAACwC,sBAAT,CAA3C,GAA8E;AAFrF,OATE,EAYF;AACC3B,QAAAA,KAAK,EAAE,wCADR;AAECC,QAAAA,IAAI,EAAEd,OAAO,CAACyC,qBAAR,GAAgC7D,UAAU,CAACoB,OAAO,CAAC0C,qBAAT,CAA1C,GAA4E;AAFnF,OAZE,EAeF;AACC7B,QAAAA,KAAK,EAAE,qDADR;AAECC,QAAAA,IAAI,EAAEnC,MAAM,CAACqB,OAAO,CAACyC,qBAAT;AAFb,OAfE,CAvDU;AA0EfE,MAAAA,WAAW,EAAE,CAAC;AACV9B,QAAAA,KAAK,EAAE,8BADG;AAEVC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAAC4C,cAAT;AAFJ,OAAD,EAGV;AACC/B,QAAAA,KAAK,EAAE,kCADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAAC6C,oBAAT;AAFf,OAHU,EAMV;AACChC,QAAAA,KAAK,EAAE,mDADR;AAECC,QAAAA,IAAI,EAAEtC,QAAQ,CAACwB,OAAO,CAAC8C,+BAAT;AAFf,OANU,EASV;AACCjC,QAAAA,KAAK,EAAE,4CADR;AAECC,QAAAA,IAAI,EAAEd,OAAO,CAAC+C,qBAAR,GAAgCnE,UAAU,CAACoB,OAAO,CAACgD,oBAAT,CAA1C,GAA2E;AAFlF,OATU,EAYV;AACCnC,QAAAA,KAAK,EAAE,2CADR;AAECC,QAAAA,IAAI,EAAEd,OAAO,CAACiD,oBAAR,GAA+BrE,UAAU,CAACoB,OAAO,CAACkD,mBAAT,CAAzC,GAAyE;AAFhF,OAZU,EAeV;AACCrC,QAAAA,KAAK,EAAE,wDADR;AAECC,QAAAA,IAAI,EAAEnC,MAAM,CAACqB,OAAO,CAACiD,oBAAT;AAFb,OAfU;AA1EE,KAAnB;AA8FA,wBACI,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAiB,MAAA,KAAK,EAAE;AAAEE,QAAAA,WAAW,EAAE,EAAf;AAAmBC,QAAAA,YAAY,EAAE,EAAjC;AAAqCC,QAAAA,aAAa,EAAE;AAApD,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,GAAG,EAAE7C,SAAS,GAAG,KAAKA,SAAR,GAAoB;AAAxD,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAWL,MAAM,CAACmD,OAAP,KAAmB,EAAnB,GAAyB,OAAOnD,MAAM,CAACoD,KAAP,KAAiB,EAAjB,GAAsBpD,MAAM,CAACmD,OAA7B,GAAuCnD,MAAM,CAACmD,OAAP,GAAiB,IAAjB,GAAwBnD,MAAM,CAACoD,KAA7E,IAAsF,GAA/G,GAAsH,EAAjI,CAA1B,CADJ,eAEI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,cAAc,EAAE,QAAlB;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OAAZ;AAA0D,MAAA,SAAS,EAAC,oBAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AACA,MAAA,UAAU,EAAErD,UADZ;AAEA,MAAA,SAAS,EAAEL,SAFX;AAGA,MAAA,YAAY,EAAEE,YAHd;AAIA,MAAA,cAAc,EAAED,cAJhB;AAKA,MAAA,cAAc,EAAEK,cALhB;AAMA,MAAA,gBAAgB,EAAEC,gBANlB;AAOA,MAAA,cAAc,EAAEC,cAPhB;AAQA,MAAA,KAAK,EAAEL,KARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CADJ,CADA,EAiBCJ,OAAO,CAAC4D,kBAAR,iBAA8B,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAA9B;AAAqD,MAAA,EAAE,EAAE,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAD2B,eAE3B;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAF2B,eAG3B,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAE3F,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCyC,UAAU,CAACC,OAAX,CAAmBkD,GAAnB,CAAuB,CAACC,GAAD,EAAMC,KAAN,kBACpB,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYD,GAAG,CAAClD,KAAhB,CADJ,eAEI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BkD,GAAG,CAACjD,IAA9B,CAFJ,CADH,CADD,CADJ,CADA,CAH2B,eAe3B;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAf2B,eAgB3B,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAE5C,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCyC,UAAU,CAACQ,UAAX,CAAsB2C,GAAtB,CAA0B,CAACC,GAAD,EAAMC,KAAN,kBACvB,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYD,GAAG,CAAClD,KAAhB,CADJ,eAEI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BkD,GAAG,CAACjD,IAA9B,CAFJ,CADH,CADD,CADJ,CADA,CAhB2B,EA4B1BR,UAAU,KAAK,CAAf,iBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACrB;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADqB,eAErB,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAEpC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCyC,UAAU,CAACiB,QAAX,CAAoBkC,GAApB,CAAwB,CAACC,GAAD,EAAMC,KAAN,kBACrB,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYD,GAAG,CAAClD,KAAhB,CADJ,eAEI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BkD,GAAG,CAACjD,IAA9B,CAFJ,CADH,CADD,CADJ,CADA,CAFqB,CA5BM,EA2C1BR,UAAU,KAAK,CAAf,iBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACrB;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADqB,eAErB,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAEpC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCyC,UAAU,CAACwB,GAAX,CAAe2B,GAAf,CAAmB,CAACC,GAAD,EAAMC,KAAN,kBAChB,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYD,GAAG,CAAClD,KAAhB,CADJ,eAEI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BkD,GAAG,CAACjD,IAA9B,CAFJ,CADH,CADD,CADJ,CADA,CAFqB,CA3CM,EA0D1BR,UAAU,KAAK,CAAf,iBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACrB;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADqB,eAErB,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAEpC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCyC,UAAU,CAACgC,WAAX,CAAuBmB,GAAvB,CAA2B,CAACC,GAAD,EAAMC,KAAN,kBACxB,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYD,GAAG,CAAClD,KAAhB,CADJ,eAEI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BkD,GAAG,CAACjD,IAA9B,CAFJ,CADH,CADD,CADJ,CADA,CAFqB,CA1DM,CAjB/B,CADJ,CADJ;AAgGH;;AAtMyC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport Chart from './Chart';\r\n\r\nimport { Table, TableBody, TableCell, TableContainer, TableRow, Paper } from '@material-ui/core';\r\n\r\nfunction to2dp(x) {\r\n    return Number.parseFloat(x).toFixed(2);\r\n}\r\n\r\nfunction addComma(x) {\r\n    return Number(x).toLocaleString('en-US');\r\n}\r\n\r\nfunction toPercent(x) {\r\n    return (Number(x) * 100).toFixed() + '%';\r\n}\r\n\r\nfunction toDays(x) {\r\n    return Number(x) + ' days';\r\n}\r\n\r\nfunction formatDate(dateString) {\r\n    if (dateString) {\r\n        const d = new Date(dateString);\r\n        const dtf = new Intl.DateTimeFormat('en', { year: '2-digit', month: 'short', day: '2-digit' });\r\n        const [{ value: mo },,{ value: da },,{ value: ye }] = dtf.formatToParts(d);\r\n    \r\n        return `${da} ${mo} ${ye}`;\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport default class Output extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { results, resources, newly_infected, measureWeeks, dates, region, \r\n            currentTab, hbeds_required, icubeds_required, vents_required, barHeight } = this.props;\r\n        const outputData = {\r\n            summary: [{\r\n                title: 'Did the pandemic end in 6 months?',\r\n                data: results.pandemic_end ? \"Yes\" : \"No\"\r\n            }, {\r\n                title: 'Peak of pandemic',\r\n                data: formatDate(results.pandemic_peak)\r\n            }, {\r\n                title: 'Daily infections at peak',\r\n                data: addComma(Number(results.daily_infection_rate_at_peak).toFixed())\r\n            }, {\r\n                title: 'Average R0',\r\n                data: to2dp(results.average_R0)\r\n            }],\r\n            population: [{\r\n                title: 'Total deceased',\r\n                data: addComma(results.total_deaths)\r\n            }, {\r\n                title: 'Total deceased (from health system overload)',\r\n                data: addComma(results.total_deaths_overload)\r\n            }, {\r\n                title: 'Total infected',\r\n                data: addComma(results.total_infected)\r\n            }, {\r\n                title: 'Total hospitalised',\r\n                data: addComma(results.total_hospitalised)\r\n            }, {\r\n                title: 'Total intensive cared',\r\n                data: addComma(results.total_received_icu)\r\n            }, {\r\n                title: 'Total ventilated',\r\n                data: addComma(results.total_received_vent)\r\n            }, {\r\n                title: 'Percentage of deaths attributed to hospital overload',\r\n                data: toPercent(to2dp(results.percentage_deaths_overload))\r\n            }, {\r\n                title: 'Percentage of total population infected',\r\n                data: toPercent(to2dp(results.percentage_infected))\r\n            }],\r\n            hospital: [{\r\n                title: 'Beds required at peak',\r\n                data: addComma(results.hbeds_req_peak)\r\n            }, {\r\n                title: 'Shortfall of beds at peak',\r\n                data: addComma(results.shortfall_hbeds_peak)\r\n            }, {\r\n                title: 'When beds ran out (normal capacity)',\r\n                data: results.days_hbed_out_normal ? formatDate(results.hbeds_run_out_normal) : \"N/A\"\r\n            }, {\r\n                title: 'When beds ran out (surge capacity)',\r\n                data: results.days_hbed_out_surge ? formatDate(results.hbeds_run_out_surge) : \"N/A\"\r\n            }, {\r\n                title: 'How many days beds ran out for (surge capacity)',\r\n                data: toDays(results.days_hbed_out_surge)\r\n            }],\r\n            ICU: [{\r\n                title: 'ICU beds required at peak',\r\n                data: addComma(results.icubeds_req_peak)\r\n            }, {\r\n                title: 'Shortfall in ICU beds at peak',\r\n                data: addComma(results.shortfall_icubeds_peak)\r\n            }, {\r\n                title: 'Number of patients who missed out on an ICU bed',\r\n                data: addComma(results.patients_missed_out_icubeds)\r\n            }, {\r\n                title: 'When ICU beds ran out (normal capacity)',\r\n                data: results.days_icubed_out_normal ? formatDate(results.icubeds_run_out_normal) : \"N/A\"\r\n            }, {\r\n                title: 'When ICU beds ran out (surge capacity)',\r\n                data: results.days_icubed_out_surge ? formatDate(results.icubeds_run_out_surge) : \"N/A\"\r\n            }, {\r\n                title: 'How many days ICU beds ran out for (surge capacity)',\r\n                data: toDays(results.days_icubed_out_surge)\r\n            }],\r\n            ventilators: [{\r\n                title: 'Ventilators required at peak',\r\n                data: addComma(results.vents_req_peak)\r\n            }, {\r\n                title: 'Shortfall in ventilators at peak',\r\n                data: addComma(results.shortfall_vents_peak)\r\n            }, {\r\n                title: 'Number of patients who missed out on a ventilator',\r\n                data: addComma(results.patients_missed_out_ventilators)\r\n            }, {\r\n                title: 'When ventilators ran out (normal capacity)',\r\n                data: results.days_vents_out_normal ? formatDate(results.vents_run_out_normal) : \"N/A\"\r\n            }, {\r\n                title: 'When ventilators ran out (surge capacity)',\r\n                data: results.days_vents_out_surge ? formatDate(results.vents_run_out_surge) : \"N/A\"\r\n            }, {\r\n                title: 'How many days ventilators ran out for (surge capacity)',\r\n                data: toDays(results.days_vents_out_surge)\r\n            }]\r\n        }\r\n        return(\r\n            <Container fluid style={{ paddingLeft: 20, paddingRight: 20, paddingBottom: 20 }}>\r\n                <Row>\r\n                <Col lg={8}>\r\n                    <div className=\"Chart\" style={{ position: \"sticky\", top: barHeight ? 20 + barHeight : 0 }}>\r\n                        <Row className=\"Measures\"><h4>Model {region.country !== \"\" ? (\"(\" + (region.state === \"\" ? region.country : region.country + \", \" + region.state) + \")\") : \"\"}</h4></Row>\r\n                        <Row style={{ justifyContent: \"center\", height: \"100%\" }} className=\"align-items-center\">\r\n                            <Chart \r\n                            currentTab={currentTab}\r\n                            resources={resources} \r\n                            measureWeeks={measureWeeks} \r\n                            newly_infected={newly_infected} \r\n                            hbeds_required={hbeds_required}\r\n                            icubeds_required={icubeds_required}\r\n                            vents_required={vents_required}\r\n                            dates={dates}/>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n                {results.total_weeks_action && <Col className=\"stats\" style={{ textAlign: \"left\" }} lg={4}>\r\n                    <h4>Key Statistics</h4>\r\n                    <h5 className=\"Stats-Category\">What happened?</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.summary.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    <h5 className=\"Stats-Category\">Population Totals</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.population.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    {currentTab === 1 && <div>\r\n                    <h5 className=\"Stats-Category\">Hospital Beds</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.hospital.map((row, index)  => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    </div>}\r\n                    {currentTab === 2 && <div>\r\n                    <h5 className=\"Stats-Category\">ICU Beds</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.ICU.map((row, index)  => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    </div>}\r\n                    {currentTab === 3 && <div>\r\n                    <h5 className=\"Stats-Category\">Ventilators</h5>\r\n                    <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {outputData.ventilators.map((row, index)  => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{row.title}</TableCell>\r\n                                <TableCell align=\"right\">{row.data}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    </div>}\r\n                </Col>}\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}