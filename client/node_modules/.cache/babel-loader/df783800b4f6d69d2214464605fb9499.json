{"ast":null,"code":"var _jsxFileName = \"/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Chart.js\";\nimport React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nrequire(\"highcharts/modules/exporting\")(Highcharts);\n\nrequire(\"highcharts/modules/data\")(Highcharts);\n\nexport default class Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n  }\n\n  componentDidMount() {\n    const container = this.chartComponent.current.container.current;\n    container.style.height = \"100%\";\n    container.style.width = \"100%\";\n    this.chartComponent.current.chart.reflow();\n  }\n\n  render() {\n    const {\n      newly_infected,\n      resources\n    } = this.props;\n    const {\n      numHospBeds,\n      numICUBeds,\n      numVents\n    } = resources;\n    const options = {\n      chart: {\n        type: 'line'\n      },\n      title: {\n        text: 'Newly Infected'\n      },\n      // data: {\n      //     googleSpreadsheetKey: '12Ldo5cwQMCu1Aka2p0nCCvajjYlXQ_ags1OtwHOyKeM'\n      // },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: ''\n        },\n        plotLines: [{\n          color: 'black',\n          // Color value\n          //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\n          value: numHospBeds,\n          // Value of where the line will appear\n          width: 1,\n          // Width of the line    \n          label: {\n            text: 'Number of Hospital Beds',\n            // Content of the label. \n            align: 'left' // Positioning of the label. \n            // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \n\n          }\n        }, {\n          color: 'red',\n          // Color value\n          //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\n          value: numICUBeds,\n          // Value of where the line will appear\n          width: 1,\n          // Width of the line    \n          label: {\n            text: 'Number of ICU Beds',\n            // Content of the label. \n            align: 'left' // Positioning of the label. \n            // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \n\n          }\n        }, {\n          color: 'blue',\n          // Color value\n          //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\n          value: numVents,\n          // Value of where the line will appear\n          width: 1,\n          // Width of the line    \n          label: {\n            text: 'Number of Ventilators',\n            // Content of the label. \n            align: 'right' // Positioning of the label. \n            // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \n\n          }\n        }]\n      },\n      plotOptions: {\n        series: {\n          pointStart: Date.UTC(2020, 2, 22),\n          pointInterval: 24 * 3600 * 1000 * 4,\n          // one day\n          marker: {\n            enabled: false\n          }\n        }\n      },\n      series: [{\n        name: \"Newly Infected\",\n        data: newly_infected\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: options,\n      ref: this.chartComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Chart.js"],"names":["React","Component","Highcharts","HighchartsReact","require","Chart","constructor","props","chartComponent","createRef","componentDidMount","container","current","style","height","width","chart","reflow","render","newly_infected","resources","numHospBeds","numICUBeds","numVents","options","type","title","text","xAxis","yAxis","plotLines","color","value","label","align","plotOptions","series","pointStart","Date","UTC","pointInterval","marker","enabled","name","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nrequire(\"highcharts/modules/exporting\")(Highcharts);\r\nrequire(\"highcharts/modules/data\")(Highcharts);\r\n\r\nexport default class Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.chartComponent = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n      const container = this.chartComponent.current.container.current;\r\n  \r\n      container.style.height = \"100%\";\r\n      container.style.width = \"100%\";\r\n      this.chartComponent.current.chart.reflow();\r\n    }\r\n\r\n    render() {\r\n        const { newly_infected, resources } = this.props;\r\n        const { numHospBeds, numICUBeds, numVents } = resources;\r\n        const options = {\r\n            chart: {\r\n                type: 'line'\r\n            },\r\n            title: {\r\n                text: 'Newly Infected'\r\n            },\r\n            // data: {\r\n            //     googleSpreadsheetKey: '12Ldo5cwQMCu1Aka2p0nCCvajjYlXQ_ags1OtwHOyKeM'\r\n            // },\r\n            xAxis: {\r\n                type: 'datetime'\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: ''\r\n                },\r\n                plotLines: [{\r\n                    color: 'black', // Color value\r\n                    //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\r\n                    value: numHospBeds, // Value of where the line will appear\r\n                    width: 1, // Width of the line    \r\n                    label: { \r\n                        text: 'Number of Hospital Beds', // Content of the label. \r\n                        align: 'left', // Positioning of the label. \r\n                    // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \r\n                    }\r\n                }, {\r\n                    color: 'red', // Color value\r\n                    //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\r\n                    value: numICUBeds, // Value of where the line will appear\r\n                    width: 1, // Width of the line    \r\n                    label: { \r\n                        text: 'Number of ICU Beds', // Content of the label. \r\n                        align: 'left', // Positioning of the label. \r\n                    // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \r\n                    }\r\n                }, {\r\n                    color: 'blue', // Color value\r\n                    //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\r\n                    value: numVents, // Value of where the line will appear\r\n                    width: 1, // Width of the line    \r\n                    label: { \r\n                        text: 'Number of Ventilators', // Content of the label. \r\n                        align: 'right', // Positioning of the label. \r\n                    // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \r\n                    }\r\n                }]\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    pointStart: Date.UTC(2020, 2, 22),\r\n                    pointInterval: 24 * 3600 * 1000 * 4, // one day\r\n                    marker: {\r\n                        enabled: false\r\n                    }\r\n                }\r\n            },\r\n            series: [{\r\n                name: \"Newly Infected\",\r\n                data: newly_infected\r\n            }]\r\n        };\r\n\r\n        return (\r\n            <div style={{ width: \"100%\", height: \"100%\" }}>\r\n                <HighchartsReact highcharts={Highcharts} options={options} ref={this.chartComponent}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}