{"ast":null,"code":"var _jsxFileName = \"/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Chart.js\";\nimport React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nrequire(\"highcharts/modules/exporting\")(Highcharts);\n\nrequire(\"highcharts/modules/data\")(Highcharts);\n\nexport default class Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.chartComponent = React.createRef();\n  }\n\n  componentDidMount() {\n    const container = this.chartComponent.current.container.current;\n    container.style.height = \"100%\";\n    container.style.width = \"100%\";\n    this.chartComponent.current.chart.reflow();\n  }\n\n  render() {\n    const {\n      newly_infected,\n      resources,\n      measureWeeks,\n      dates,\n      hbeds_required,\n      icubeds_required,\n      vents_required,\n      currentTab\n    } = this.props;\n    const {\n      numHospBeds,\n      numICUBeds,\n      numVents\n    } = resources;\n    const possibleData = [newly_infected, hbeds_required, icubeds_required, vents_required];\n    const dataNames = [\"Infected\", \"Hospital Beds Required\", \"ICU Beds Required\", \"Ventilators Required\"];\n    const currentTabData = possibleData[currentTab];\n    const currentTabName = dataNames[currentTab];\n    const possiblePlotLines = [null, numHospBeds, numICUBeds, numVents];\n    const plotLineNames = [\"\", \"Number of Hospital Beds\", \"Number of ICU Beds\", \"Number of Ventilators\"];\n    const currentTabPlotLine = possiblePlotLines[currentTab];\n    const currentTabPlotLineName = plotLineNames[currentTab]; // Compute weeks\n\n    const [doNothing, socDist, relaxedLD, sigLD, critLD] = measureWeeks;\n    const data = dates.map((dateString, index) => {\n      var dateArray = dateString.split(\"-\").map(Number);\n      dateArray[1] -= 1;\n      const date = Date.UTC(dateArray[0], dateArray[1], dateArray[2]);\n      return [date, currentTabData[index]];\n    });\n    var indx = 0;\n    var measureDates = [];\n\n    if (dates[0]) {\n      measureDates.push(data[0][0]);\n      measureWeeks.forEach(int_len => {\n        indx += Math.trunc(Math.round(int_len * 7 / 4));\n\n        if (indx > dates.length) {\n          indx = dates.length;\n        }\n\n        measureDates.push(data[indx ? indx - 1 : indx][0]);\n      });\n    }\n\n    const [startDoNothing, startSocDist, startRelaxedLD, startSigLD, startCritLD, endCritLD] = measureDates;\n    const options = {\n      chart: {\n        backgroundColor: '#fefefa',\n        type: 'line'\n      },\n      title: {\n        text: currentTabName + ' Over Time'\n      },\n      // data: {\n      //     googleSpreadsheetKey: '12Ldo5cwQMCu1Aka2p0nCCvajjYlXQ_ags1OtwHOyKeM'\n      // },\n      xAxis: {\n        type: 'datetime',\n        plotBands: [{\n          color: doNothing ? 'rgba(210,108,103,0.2)' : 'rgba(255,255,255,0)',\n          from: startDoNothing,\n          to: startSocDist // label: {\n          //     text: doNothing ? 'Do Nothing' : '',\n          //     align: 'center'\n          // }\n\n        }, {\n          color: socDist ? 'rgba(223,156,153,0.2)' : 'rgba(255,255,255,0)',\n          from: startSocDist,\n          to: startRelaxedLD // label: {\n          //     text: socDist ? 'Social Distancing': '',\n          //     align: 'center'\n          // }\n\n        }, {\n          color: relaxedLD ? 'rgba(251,230,159,0.2)' : 'rgba(255,255,255,0)',\n          from: startRelaxedLD,\n          to: startSigLD // label: {\n          //     text: relaxedLD ? 'Relaxed Lockdown' : '',\n          //     align: 'center'\n          // }\n\n        }, {\n          color: sigLD ? 'rgba(189,214,171,0.2)' : 'rgba(255,255,255,0)',\n          from: startSigLD,\n          to: startCritLD // label: {\n          //     text: sigLD ? 'Significant Lockdown' : '',\n          //     align: 'center'\n          // }\n\n        }, {\n          color: critLD ? 'rgba(156,195,129,0.2)' : 'rgba(255,255,255,0)',\n          from: startCritLD,\n          to: endCritLD // label: {\n          //     text: critLD ? 'Critical Lockdown' : '',\n          //     align: 'center'\n          // }\n\n        }]\n      },\n      yAxis: {\n        title: {\n          text: currentTabName\n        },\n        plotLines: [{\n          color: 'red',\n          // Color value\n          //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\n          value: currentTabPlotLine,\n          // Value of where the line will appear\n          width: 1,\n          // Width of the line    \n          label: {\n            text: currentTabPlotLineName,\n            // Content of the label. \n            align: 'left' // Positioning of the label. \n            // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \n\n          }\n        }]\n      },\n      plotOptions: {\n        series: {\n          marker: {\n            enabled: false\n          }\n        }\n      },\n      series: [{\n        name: currentTabName,\n        data: data\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: options,\n      ref: this.chartComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Chart.js"],"names":["React","Component","Highcharts","HighchartsReact","require","Chart","constructor","props","chartComponent","createRef","componentDidMount","container","current","style","height","width","chart","reflow","render","newly_infected","resources","measureWeeks","dates","hbeds_required","icubeds_required","vents_required","currentTab","numHospBeds","numICUBeds","numVents","possibleData","dataNames","currentTabData","currentTabName","possiblePlotLines","plotLineNames","currentTabPlotLine","currentTabPlotLineName","doNothing","socDist","relaxedLD","sigLD","critLD","data","map","dateString","index","dateArray","split","Number","date","Date","UTC","indx","measureDates","push","forEach","int_len","Math","trunc","round","length","startDoNothing","startSocDist","startRelaxedLD","startSigLD","startCritLD","endCritLD","options","backgroundColor","type","title","text","xAxis","plotBands","color","from","to","yAxis","plotLines","value","label","align","plotOptions","series","marker","enabled","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nrequire(\"highcharts/modules/exporting\")(Highcharts);\r\nrequire(\"highcharts/modules/data\")(Highcharts);\r\n\r\nexport default class Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.chartComponent = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n      const container = this.chartComponent.current.container.current;\r\n  \r\n      container.style.height = \"100%\";\r\n      container.style.width = \"100%\";\r\n      this.chartComponent.current.chart.reflow();\r\n    }\r\n\r\n    render() {\r\n        const { newly_infected, resources, measureWeeks, dates, hbeds_required, icubeds_required, vents_required, currentTab } = this.props;\r\n        const { numHospBeds, numICUBeds, numVents } = resources;\r\n\r\n        const possibleData = [newly_infected, hbeds_required, icubeds_required, vents_required];\r\n        const dataNames = [\"Infected\", \"Hospital Beds Required\", \"ICU Beds Required\", \"Ventilators Required\"];\r\n        const currentTabData = possibleData[currentTab];\r\n        const currentTabName = dataNames[currentTab];\r\n        \r\n        const possiblePlotLines = [ null, numHospBeds, numICUBeds, numVents ];\r\n        const plotLineNames = [\"\", \"Number of Hospital Beds\", \"Number of ICU Beds\", \"Number of Ventilators\"]\r\n        const currentTabPlotLine = possiblePlotLines[currentTab];\r\n        const currentTabPlotLineName = plotLineNames[currentTab]\r\n        \r\n        // Compute weeks\r\n        const [ doNothing, socDist, relaxedLD, sigLD, critLD ] = measureWeeks;\r\n        \r\n        const data = dates.map((dateString, index) => {\r\n            var dateArray = dateString.split(\"-\").map(Number);\r\n            dateArray[1] -= 1;\r\n            const date = Date.UTC(dateArray[0], dateArray[1], dateArray[2]);\r\n            return [date, currentTabData[index]];\r\n        });\r\n\r\n        var indx = 0;\r\n        var measureDates = [];\r\n        if (dates[0]) {\r\n            measureDates.push(data[0][0]);\r\n            measureWeeks.forEach((int_len) => {\r\n                indx += Math.trunc(Math.round(int_len * 7 / 4));\r\n                if (indx > dates.length){\r\n                    indx = dates.length;\r\n                } \r\n                measureDates.push(data[indx ? indx-1: indx][0]);\r\n            })\r\n        }\r\n        const [ startDoNothing, startSocDist, startRelaxedLD, startSigLD, startCritLD, endCritLD ] = measureDates;\r\n\r\n        const options = {\r\n            chart: {\r\n                backgroundColor: '#fefefa',\r\n                type: 'line'\r\n            },\r\n            title: {\r\n                text: currentTabName + ' Over Time'\r\n            },\r\n            // data: {\r\n            //     googleSpreadsheetKey: '12Ldo5cwQMCu1Aka2p0nCCvajjYlXQ_ags1OtwHOyKeM'\r\n            // },\r\n            xAxis: {\r\n                type: 'datetime',\r\n                plotBands: [{\r\n                    color: doNothing ? 'rgba(210,108,103,0.2)' : 'rgba(255,255,255,0)',\r\n                    from: startDoNothing,\r\n                    to: startSocDist,\r\n                    // label: {\r\n                    //     text: doNothing ? 'Do Nothing' : '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }, {\r\n                    color: socDist ? 'rgba(223,156,153,0.2)' : 'rgba(255,255,255,0)',\r\n                    from: startSocDist,\r\n                    to: startRelaxedLD,\r\n                    // label: {\r\n                    //     text: socDist ? 'Social Distancing': '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }, {\r\n                    color: relaxedLD ? 'rgba(251,230,159,0.2)' : 'rgba(255,255,255,0)',\r\n                    from: startRelaxedLD,\r\n                    to: startSigLD,\r\n                    // label: {\r\n                    //     text: relaxedLD ? 'Relaxed Lockdown' : '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }, {\r\n                    color: sigLD ? 'rgba(189,214,171,0.2)' : 'rgba(255,255,255,0)',\r\n                    from: startSigLD,\r\n                    to: startCritLD,\r\n                    // label: {\r\n                    //     text: sigLD ? 'Significant Lockdown' : '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }, {\r\n                    color: critLD ? 'rgba(156,195,129,0.2)' : 'rgba(255,255,255,0)',\r\n                    from: startCritLD,\r\n                    to: endCritLD,\r\n                    // label: {\r\n                    //     text: critLD ? 'Critical Lockdown' : '',\r\n                    //     align: 'center'\r\n                    // }\r\n                }]\r\n\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: currentTabName\r\n                },\r\n                plotLines: [{\r\n                    color: 'red', // Color value\r\n                    //   dashStyle: 'longdashdot', // Style of the plot line. Default to solid\r\n                    value: currentTabPlotLine, // Value of where the line will appear\r\n                    width: 1, // Width of the line    \r\n                    label: { \r\n                        text: currentTabPlotLineName, // Content of the label. \r\n                        align: 'left', // Positioning of the label. \r\n                    // Default to center. x: +10 // Amount of pixels the label will be repositioned according to the alignment. \r\n                    }\r\n                }]\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    marker: {\r\n                        enabled: false\r\n                    }\r\n                }\r\n            },\r\n            series: [{\r\n                name: currentTabName,\r\n                data: data\r\n            }]\r\n        };\r\n\r\n        return (\r\n            <div style={{ width: \"100%\", height: \"100%\" }}>\r\n                <HighchartsReact highcharts={Highcharts} options={options} ref={this.chartComponent}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}