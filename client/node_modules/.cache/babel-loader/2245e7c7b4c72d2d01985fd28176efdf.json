{"ast":null,"code":"var _jsxFileName = \"/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Model.js\";\nimport React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Input from './Input';\nimport Output from './Output';\nexport default class Model extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateMeasureWeeks = measureWeeks => {\n      this.setState({\n        measureWeeks: measureWeeks\n      });\n      this.updateData();\n    };\n\n    this.updateModelParams = modelParams => {\n      this.setState({\n        modelParams: modelParams\n      });\n      this.updateData();\n    };\n\n    this.updateR0Params = r0_params => {\n      this.setState({\n        r0_params: r0_params\n      });\n      this.updateData();\n    };\n\n    this.updateHospBeds = hospBeds => {\n      this.setState({\n        hospBeds: hospBeds\n      });\n      this.updateData();\n    };\n\n    this.updateICUBeds = ICUBeds => {\n      this.setState({\n        ICUBeds: ICUBeds\n      });\n      this.updateData();\n    };\n\n    this.updateVentilators = ventilators => {\n      this.setState({\n        ventilators: ventilators\n      });\n      this.updateData();\n    };\n\n    this.updateData = () => {\n      const {\n        measureWeeks,\n        modelParams,\n        r0_params,\n        hospBeds,\n        ICUBeds,\n        ventilators,\n        population,\n        weeklyHosp,\n        cases\n      } = this.state;\n      var url = \"http://localhost:9000\";\n      url += \"?int_len=\" + measureWeeks;\n      url += \"&model_vals=\" + modelParams;\n      url += \"&r0=\" + r0_params;\n      url += \"&resource_vals=\" + hospBeds + \",\" + ICUBeds + \",\" + ventilators;\n      url += \"&state_info=\" + population + \",\" + weeklyHosp;\n      url += \"&state_cases=\" + cases;\n      fetch(url).then(res => res.json()).then(json => {\n        json = JSON.parse(json);\n        this.setState({\n          model_results: json.results,\n          newly_infected: json.data.newly_infected,\n          dates: json.data.dates\n        });\n        var axis = this.output.current.chartComponent.current.chartComponent.current.chart.axes[1];\n        axis.plotLinesAndBands.forEach(function (lineOrBand) {\n          for (var prop in axis.ticks) {\n            var tick = axis.ticks[prop];\n\n            if (Number(lineOrBand.options.value) === tick.pos) {\n              tick.gridLine.element.style.display = 'none';\n            }\n          }\n        });\n      }).catch(err => err);\n    };\n\n    this.state = {\n      // Model inputs\n      // Intervention lengths\n      measureWeeks: [0, 26, 0, 0, 0],\n      // Model Parameters\n      modelParams: ['6.66', '2.0', '50', '1.0', '0.97', '1.66', '100', '100'],\n      // Intervention Parameters\n      r0_params: ['2.67', '1.68', '1.40', '1.05', '0.32'],\n      // Resource Availability\n      // Hospital Beds\n      hospBeds: ['23187', '40', '80'],\n      // ICU Beds\n      ICUBeds: ['476', '40', '80'],\n      // Ventilators\n      ventilators: ['358', '40', '80', '300'],\n      weeklyHosp: 54173,\n      // Model outputs\n      model_results: {},\n      newly_infected: [],\n      dates: []\n    };\n    this.output = React.createRef();\n  }\n\n  componentDidMount() {\n    var {\n      country,\n      state\n    } = this.props.region;\n    country = country.replace(/ /g, \"_\");\n    state = state.replace(/ /g, \"_\");\n    const rootUrl = \"http://localhost:9000/\";\n    const infoEndpoint = \"info\";\n    const caseEndpoint = \"case\";\n    var queryParamStr = \"?country=\" + country;\n\n    if (state !== \"\") {\n      queryParamStr += \"&state=\" + state;\n    }\n\n    const infoUrl = rootUrl + infoEndpoint + queryParamStr;\n    fetch(infoUrl).then(res => !res.ok ? res.text().then(text => {\n      throw Error(text);\n    }) : res.json()).then(json => {\n      json = JSON.parse(json);\n      console.log(\"Info API returned:\");\n      console.log(json);\n      const hbeds = json[\"public hospital beds\"] + json[\"private hospital beds\"];\n      const icu_beds = json[\"icu beds\"];\n      const weekly_hosp = json[\"weekly hospital\"];\n      var {\n        hospBeds,\n        ICUBeds\n      } = this.state;\n      hospBeds[0] = hbeds;\n      ICUBeds[0] = icu_beds;\n      this.setState({\n        population: json.population,\n        hospBeds: hospBeds,\n        ICUBeds: ICUBeds,\n        weeklyHosp: weekly_hosp\n      }); // Get cases info from API\n      // Compute date 15 days before (should be 13 but redundancy to deal with time zone diffs)\n\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - 15);\n      const startDateString = startDate.toISOString().split(\"T\")[0];\n      queryParamStr += \"&start_date=\" + startDateString;\n      const caseUrl = rootUrl + caseEndpoint + queryParamStr;\n      fetch(caseUrl).then(res => !res.ok ? res.text().then(text => {\n        throw Error(text);\n      }) : res.json()).then(json => {\n        json = JSON.parse(json);\n        console.log(\"Case API returned:\");\n        console.log(json);\n        const cases = json[\"cases\"];\n\n        while (cases.length != 13) {\n          const first = cases.shift();\n          cases[0] += first;\n        }\n\n        console.log(cases);\n        this.setState({\n          cases: cases\n        });\n        this.updateData();\n      }).catch(err => console.log(err));\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      measureWeeks,\n      modelParams,\n      r0_params,\n      hospBeds,\n      ICUBeds,\n      ventilators,\n      model_results,\n      newly_infected,\n      dates\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        width: \"100%\",\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 3,\n      style: {\n        paddingRight: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Input border-right border-gray\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      params: {\n        measureWeeks: measureWeeks,\n        modelParams: modelParams,\n        r0_params: r0_params,\n        hospBeds: hospBeds,\n        ICUBeds: ICUBeds,\n        ventilators: ventilators\n      },\n      eventHandlers: {\n        updateMeasureWeeks: this.updateMeasureWeeks,\n        updateModelParams: this.updateModelParams,\n        updateR0Params: this.updateR0Params,\n        updateHospBeds: this.updateHospBeds,\n        updateICUBeds: this.updateICUBeds,\n        updateVentilators: this.updateVentilators\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      xs: 9,\n      style: {\n        backgroundColor: '#fefefa',\n        paddingLeft: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Output, {\n      results: model_results,\n      measureWeeks: measureWeeks,\n      resources: {\n        numHospBeds: hospBeds[0],\n        numICUBeds: ICUBeds[0],\n        numVents: ventilators[1]\n      },\n      region: {\n        country: this.props.region.country,\n        state: this.props.region.state\n      },\n      dates: dates,\n      newly_infected: newly_infected,\n      ref: this.output,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Model.js"],"names":["React","Component","Row","Col","Input","Output","Model","constructor","props","updateMeasureWeeks","measureWeeks","setState","updateData","updateModelParams","modelParams","updateR0Params","r0_params","updateHospBeds","hospBeds","updateICUBeds","ICUBeds","updateVentilators","ventilators","population","weeklyHosp","cases","state","url","fetch","then","res","json","JSON","parse","model_results","results","newly_infected","data","dates","axis","output","current","chartComponent","chart","axes","plotLinesAndBands","forEach","lineOrBand","prop","ticks","tick","Number","options","value","pos","gridLine","element","style","display","catch","err","createRef","componentDidMount","country","region","replace","rootUrl","infoEndpoint","caseEndpoint","queryParamStr","infoUrl","ok","text","Error","console","log","hbeds","icu_beds","weekly_hosp","startDate","Date","setDate","getDate","startDateString","toISOString","split","caseUrl","length","first","shift","render","width","margin","paddingRight","backgroundColor","paddingLeft","numHospBeds","numICUBeds","numVents"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nimport Input from './Input';\nimport Output from './Output';\n\nexport default class Model extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            // Model inputs\n            // Intervention lengths\n            measureWeeks:               [0, 26, 0, 0, 0],\n            \n            // Model Parameters\n            modelParams:                ['6.66', '2.0', '50', '1.0', '0.97', '1.66', '100', '100'],\n\n            // Intervention Parameters\n            r0_params:                  ['2.67', '1.68', '1.40', '1.05', '0.32'],\n\n            // Resource Availability\n            // Hospital Beds\n            hospBeds:                   ['23187', '40', '80'],\n            // ICU Beds\n            ICUBeds:                    ['476', '40', '80'],\n            // Ventilators\n            ventilators:                ['358', '40', '80', '300'],\n\n            weeklyHosp:                 54173,\n\n            // Model outputs\n            model_results: {},\n            newly_infected: [],\n            dates: []\n        };\n        this.output = React.createRef();\n    }\n\n    updateMeasureWeeks = (measureWeeks) => {\n        this.setState({ measureWeeks: measureWeeks });\n        this.updateData();\n    }\n\n    updateModelParams = (modelParams) => {\n        this.setState({ modelParams: modelParams });\n        this.updateData();\n    }\n\n    updateR0Params = (r0_params) => {\n        this.setState({ r0_params: r0_params });\n        this.updateData();\n    }\n    \n    updateHospBeds = (hospBeds) => {\n        this.setState({ hospBeds: hospBeds });\n        this.updateData();\n    }\n\n    updateICUBeds = (ICUBeds) => {\n        this.setState({ ICUBeds: ICUBeds });\n        this.updateData();\n    }\n\n    updateVentilators = (ventilators) => {\n        this.setState({ ventilators: ventilators });\n        this.updateData();\n    }\n\n    updateData = () => {\n        const { measureWeeks, modelParams, r0_params, hospBeds, ICUBeds, ventilators, population, weeklyHosp, cases } = this.state;\n        var url = \"http://localhost:9000\";\n        url += \"?int_len=\" + measureWeeks;\n        url += \"&model_vals=\" + modelParams;\n        url += \"&r0=\" + r0_params;\n        url += \"&resource_vals=\" + hospBeds + \",\" + ICUBeds + \",\" + ventilators;\n        url += \"&state_info=\" + population + \",\" + weeklyHosp;\n        url += \"&state_cases=\" + cases;\n        fetch(url)\n            .then(res => res.json())\n            .then(json => {\n                json = JSON.parse(json);\n                this.setState({ \n                    model_results: json.results, \n                    newly_infected: json.data.newly_infected,\n                    dates: json.data.dates\n                });\n                var axis = this.output.current.chartComponent.current.chartComponent.current.chart.axes[1];\n                axis.plotLinesAndBands.forEach(function(lineOrBand) {\n                    for (var prop in axis.ticks) {\n                        var tick = axis.ticks[prop];\n                        if (Number(lineOrBand.options.value) === tick.pos) {\n                            tick.gridLine.element.style.display = 'none';\n                        }\n                    }\n                });\n            })\n            .catch(err => err);\n    }\n\n    componentDidMount() {\n        var { country, state } = this.props.region;\n        country = country.replace(/ /g, \"_\");\n        state = state.replace(/ /g, \"_\");\n        const rootUrl = \"http://localhost:9000/\";\n        const infoEndpoint = \"info\";\n        const caseEndpoint = \"case\";\n        var queryParamStr = \"?country=\" + country;\n        if (state !== \"\"){\n            queryParamStr += \"&state=\" + state;\n        }\n        const infoUrl = rootUrl + infoEndpoint + queryParamStr;\n        fetch(infoUrl)\n            .then(res => !res.ok ? res.text().then(text => {throw Error(text)}) : res.json())\n            .then(json => {\n                json = JSON.parse(json);\n                console.log(\"Info API returned:\");\n                console.log(json);\n                const hbeds = json[\"public hospital beds\"] + json[\"private hospital beds\"];\n                const icu_beds = json[\"icu beds\"];\n                const weekly_hosp = json[\"weekly hospital\"];\n                var { hospBeds, ICUBeds } = this.state;\n                hospBeds[0] = hbeds;\n                ICUBeds[0] = icu_beds;\n                this.setState({\n                    population: json.population,\n                    hospBeds: hospBeds,\n                    ICUBeds: ICUBeds,\n                    weeklyHosp: weekly_hosp\n                });\n\n                // Get cases info from API\n                // Compute date 15 days before (should be 13 but redundancy to deal with time zone diffs)\n                const startDate = new Date();\n                startDate.setDate(startDate.getDate() - 15);\n                const startDateString = startDate.toISOString().split(\"T\")[0];\n                queryParamStr += \"&start_date=\" + startDateString;\n                const caseUrl = rootUrl + caseEndpoint + queryParamStr;\n                fetch(caseUrl)\n                    .then(res => !res.ok ? res.text().then(text => {throw Error(text)}) : res.json())\n                    .then(json => {\n                        json = JSON.parse(json);\n                        console.log(\"Case API returned:\")\n                        console.log(json);\n                        const cases = json[\"cases\"];\n                        while (cases.length != 13){\n                            const first = cases.shift();\n                            cases[0] += first;\n                        }\n                        console.log(cases);\n                        this.setState({ cases: cases });\n                        this.updateData();\n                    })\n                    .catch(err => console.log(err))\n            })\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        const { measureWeeks, modelParams, r0_params, hospBeds, ICUBeds, ventilators, model_results, newly_infected, dates } = this.state;\n        return (\n        <div>\n            <Row style={{ width: \"100%\", margin: 0 }}>\n                <Col xs={3} style={{ paddingRight: 0 }}>\n                    <div className=\"Input border-right border-gray\">\n                        <Input\n                            params = {{\n                                measureWeeks: measureWeeks, \n                                modelParams: modelParams, \n                                r0_params: r0_params, \n                                hospBeds: hospBeds, \n                                ICUBeds: ICUBeds, \n                                ventilators: ventilators\n                            }}\n                            eventHandlers={{\n                                updateMeasureWeeks: this.updateMeasureWeeks,\n                                updateModelParams: this.updateModelParams,\n                                updateR0Params: this.updateR0Params,\n                                updateHospBeds: this.updateHospBeds,\n                                updateICUBeds: this.updateICUBeds,\n                                updateVentilators: this.updateVentilators\n                            }}/>\n                    </div>\n                </Col>\n                <Col xs={9} style={{ backgroundColor: '#fefefa', paddingLeft: 0 }}>\n                    <Output \n                        results={model_results}\n                        measureWeeks={measureWeeks}\n                        resources={{\n                            numHospBeds: hospBeds[0],\n                            numICUBeds:  ICUBeds[0],\n                            numVents:    ventilators[1]\n                        }}\n                        region = {{ \n                            country: this.props.region.country,\n                            state: this.props.region.state\n                        }}\n                        dates={dates}\n                        newly_infected={newly_infected}\n                        ref={this.output}/>\n                </Col>\n            </Row>\n        </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}