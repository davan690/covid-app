{"ast":null,"code":"var _jsxFileName = \"/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Params.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Container } from 'react-bootstrap';\nimport { Input, InputAdornment, Table, TableBody, TableCell, TableContainer, TableRow } from '@material-ui/core';\n\nfunction toDp(x, prec) {\n  return Number.parseFloat(x).toFixed(prec);\n}\n\nexport default class Params extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.formatAsPercent = num => {\n      return num + '%';\n    };\n  }\n\n  render() {\n    const {\n      modelParams,\n      r0_params,\n      hospBeds,\n      ICUBeds,\n      ventilators\n    } = this.props.params;\n    const modelParamTitles = ['Hospital Admission Rates', 'ICU Admission Rates', '% ICU Admissions needing Ventilator', 'Ventilator Rates', 'Case Fatality Rate (Normal)', 'Case Fatality Rate (Overload)', 'Mortality Rate of ICU Blocked Patients', 'Mortality Rate of Ventilator Blocked Patients]'];\n    const r0ParamTitles = ['Do Nothing', 'Social Distancing', 'Relaxed Lockdown', 'Significant Lockdown', 'Critical Lockdown'];\n    const hospTitles = ['Number of Hospital Beds', 'Bed Utilisation', 'Surge Bed Utilisation'];\n    const ICUTitles = ['Number of ICU Beds', 'ICU Bed Utilisation', 'Surge ICU Bed Utilisation'];\n    const ventTitles = ['Ventilator Numbers (per 100,000)', 'Number of Ventilators', 'Ventilator Utilisation', 'Surge Ventilator Utilisation', 'Surge Ventilator Capacity'];\n    const {\n      updateModelParams,\n      updateR0Params,\n      updateHospBeds,\n      updateICUBeds,\n      updateVentilators\n    } = this.props.eventHandlers;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      style: {\n        padding: 20,\n        paddingTop: 80\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 60\n      }\n    }, \"Parameters\"))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 60\n      }\n    }, \"Model Parameters\"))), /*#__PURE__*/React.createElement(TableContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, modelParams.map((entry, index) => {\n      const isCFR = index === 4 || index === 5;\n      return /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 33\n        }\n      }, modelParamTitles[index]), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"right\",\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0,\n          width: \"20%\"\n        },\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        value: toDp(entry * 100, isCFR ? 1 : 0),\n        margin: \"dense\",\n        onChange: event => {\n          modelParams[index] = event.target.value / 100;\n          updateModelParams(modelParams);\n        },\n        endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 47\n          }\n        }, \"%\"),\n        inputProps: {\n          step: isCFR ? 0.1 : 1,\n          min: 0,\n          type: 'number'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 33\n        }\n      })));\n    })))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        paddingTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 60\n      }\n    }, \"Intervention Parameters\"))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 7,\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }\n    }, \"Measures\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }, \"R0\"))), /*#__PURE__*/React.createElement(TableContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }, r0_params.map((entry, index) => /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      style: {\n        paddingLeft: 0,\n        paddingRight: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }\n    }, r0ParamTitles[index]), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      style: {\n        paddingLeft: 0,\n        paddingRight: 0,\n        width: \"20%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      value: toDp(entry, 2),\n      margin: \"dense\",\n      onChange: event => {\n        r0_params[index] = event.target.value;\n        updateR0Params(r0_params);\n      },\n      inputProps: {\n        step: 0.01,\n        min: 0,\n        type: 'number'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    }))))))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        paddingTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 60\n      }\n    }, \"Resource Availability\"))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        paddingTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 60\n      }\n    }, \"Hospital Beds\"))), /*#__PURE__*/React.createElement(TableContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    }, hospBeds.map((entry, index) => {\n      const isInt = index === 0;\n      return /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 33\n        }\n      }, hospTitles[index]), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"right\",\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0,\n          width: \"20%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        value: isInt ? entry : entry * 100,\n        margin: \"dense\",\n        onChange: event => {\n          hospBeds[index] = isInt ? event.target.value : event.target.value / 100;\n          updateHospBeds(hospBeds);\n        },\n        endAdornment: !isInt && /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 57\n          }\n        }, \"%\"),\n        inputProps: {\n          step: isInt ? 100 : 1,\n          min: 0,\n          type: 'number'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 33\n        }\n      })));\n    })))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        paddingTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 60\n      }\n    }, \"ICU Beds\"))), /*#__PURE__*/React.createElement(TableContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    }, ICUBeds.map((entry, index) => {\n      const isInt = index === 0;\n      return /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 33\n        }\n      }, ICUTitles[index]), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"right\",\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0,\n          width: \"20%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        value: isInt ? entry : entry * 100,\n        margin: \"dense\",\n        onChange: event => {\n          ICUBeds[index] = isInt ? event.target.value : event.target.value / 100;\n          updateICUBeds(ICUBeds);\n        },\n        fullWidth: true,\n        endAdornment: !isInt && /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 57\n          }\n        }, \"%\"),\n        inputProps: {\n          step: isInt ? 100 : 1,\n          min: 0,\n          type: 'number'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 33\n        }\n      })));\n    })))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        paddingTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 60\n      }\n    }, \"Ventilators\"))), /*#__PURE__*/React.createElement(TableContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 25\n      }\n    }, ventilators.map((entry, index) => {\n      const is1dp = index === 0;\n      const isInt = index === 1;\n      return /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 33\n        }\n      }, ventTitles[index]), /*#__PURE__*/React.createElement(TableCell, {\n        align: \"right\",\n        style: {\n          paddingLeft: 0,\n          paddingRight: 0,\n          width: \"20%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        value: isInt || is1dp ? entry : entry * 100,\n        margin: \"dense\",\n        onChange: event => {\n          ventilators[index] = isInt || is1dp ? event.target.value : event.target.value / 100;\n          updateVentilators(ventilators);\n        },\n        endAdornment: !isInt && !is1dp && /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 67\n          }\n        }, \"%\"),\n        fullWidth: true,\n        inputProps: {\n          step: isInt ? 100 : is1dp ? 0.1 : 1,\n          min: 0,\n          type: 'number'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 33\n        }\n      })));\n    }))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/khoa/Dropbox/Websites/covid19/covid-app/client/src/components/Params.js"],"names":["React","Component","Row","Col","Container","Input","InputAdornment","Table","TableBody","TableCell","TableContainer","TableRow","toDp","x","prec","Number","parseFloat","toFixed","Params","formatAsPercent","num","render","modelParams","r0_params","hospBeds","ICUBeds","ventilators","props","params","modelParamTitles","r0ParamTitles","hospTitles","ICUTitles","ventTitles","updateModelParams","updateR0Params","updateHospBeds","updateICUBeds","updateVentilators","eventHandlers","padding","paddingTop","textAlign","map","entry","index","isCFR","paddingLeft","paddingRight","width","event","target","value","step","min","type","isInt","is1dp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport { Input, InputAdornment, Table, TableBody, TableCell, TableContainer, TableRow } from '@material-ui/core';\r\n\r\nfunction toDp(x, prec) {\r\n    return Number.parseFloat(x).toFixed(prec);\r\n}\r\nexport default class Params extends Component {\r\n    formatAsPercent = (num) => {\r\n        return num + '%';\r\n    }\r\n\r\n    render() {\r\n        const { modelParams, r0_params, hospBeds, ICUBeds, ventilators } = this.props.params;\r\n        const modelParamTitles = [ \r\n            'Hospital Admission Rates', \r\n            'ICU Admission Rates', \r\n            '% ICU Admissions needing Ventilator',\r\n            'Ventilator Rates', \r\n            'Case Fatality Rate (Normal)', \r\n            'Case Fatality Rate (Overload)',\r\n            'Mortality Rate of ICU Blocked Patients', \r\n            'Mortality Rate of Ventilator Blocked Patients]' \r\n        ];\r\n        const r0ParamTitles = [ \r\n            'Do Nothing', \r\n            'Social Distancing', \r\n            'Relaxed Lockdown', \r\n            'Significant Lockdown', \r\n            'Critical Lockdown' \r\n        ];\r\n        const hospTitles = [ \r\n            'Number of Hospital Beds', \r\n            'Bed Utilisation', \r\n            'Surge Bed Utilisation' \r\n        ];\r\n        const ICUTitles = [\r\n            'Number of ICU Beds', \r\n            'ICU Bed Utilisation', \r\n            'Surge ICU Bed Utilisation' \r\n        ];\r\n        const ventTitles = [ \r\n            'Ventilator Numbers (per 100,000)', \r\n            'Number of Ventilators', \r\n            'Ventilator Utilisation', \r\n            'Surge Ventilator Utilisation', \r\n            'Surge Ventilator Capacity'\r\n        ]\r\n        const { updateModelParams, updateR0Params, updateHospBeds, updateICUBeds, updateVentilators } = this.props.eventHandlers;\r\n        return(\r\n            <div>\r\n                <Container fluid style={{ padding: 20, paddingTop: 80 }}>\r\n                    <Row>\r\n                        <Col style={{ textAlign: \"left\" }}><h4>Parameters</h4></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col style={{ textAlign: \"left\" }}><h5>Model Parameters</h5></Col>\r\n                    </Row>\r\n                    <TableContainer>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {modelParams.map((entry, index) => {\r\n                            const isCFR = index === 4 || index === 5;\r\n                            return (\r\n                            <TableRow>\r\n                                <TableCell style={{ paddingLeft: 0, paddingRight: 0 }}>{modelParamTitles[index]}</TableCell>\r\n                                <TableCell align=\"right\" style={{ paddingLeft: 0, paddingRight: 0, width: \"20%\" }}\r\n                                size='small'>\r\n                                <Input\r\n                                value={toDp(entry * 100, isCFR ? 1 : 0)} \r\n                                margin=\"dense\"\r\n                                onChange={event => {\r\n                                    modelParams[index] = event.target.value / 100;\r\n                                    updateModelParams(modelParams);\r\n                                }}\r\n                                endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\r\n                                inputProps={{\r\n                                step: isCFR ? 0.1 : 1,\r\n                                min: 0,\r\n                                type: 'number'\r\n                                }}\r\n                                />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            )\r\n                        })}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    <Row style={{ paddingTop: 10 }}>\r\n                        <Col style={{ textAlign: \"left\" }}><h5>Intervention Parameters</h5></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={7} style={{ textAlign: \"left\" }}>\r\n                            <h6>Measures</h6>\r\n                        </Col>\r\n                        <Col>\r\n                            <h6>R0</h6>\r\n                        </Col>\r\n                    </Row>\r\n                    <TableContainer>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {r0_params.map((entry, index) => (\r\n                            <TableRow>\r\n                                <TableCell style={{ paddingLeft: 0, paddingRight: 0 }}>{r0ParamTitles[index]}</TableCell>\r\n                                <TableCell align=\"right\" style={{ paddingLeft: 0, paddingRight: 0, width: \"20%\" }}>\r\n                                <Input\r\n                                value={toDp(entry, 2)} \r\n                                margin=\"dense\"\r\n                                onChange={event => {\r\n                                    r0_params[index] = event.target.value;\r\n                                    updateR0Params(r0_params);\r\n                                }}\r\n                                inputProps={{\r\n                                step: 0.01,\r\n                                min: 0,\r\n                                type: 'number'\r\n                                }}\r\n                                />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>                    \r\n                    <Row style={{ paddingTop: 10 }}>\r\n                        <Col style={{ textAlign: \"left\" }}><h5>Resource Availability</h5></Col>\r\n                    </Row>\r\n                    <Row style={{ paddingTop: 10 }}>\r\n                        <Col style={{ textAlign: \"left\" }}><h6>Hospital Beds</h6></Col>\r\n                    </Row>\r\n                    <TableContainer>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {hospBeds.map((entry, index) => {\r\n                            const isInt = index === 0;\r\n                            return (\r\n                            <TableRow>\r\n                                <TableCell style={{ paddingLeft: 0, paddingRight: 0 }}>{hospTitles[index]}</TableCell>\r\n                                <TableCell align=\"right\" style={{ paddingLeft: 0, paddingRight: 0, width: \"20%\" }}>\r\n                                <Input\r\n                                value={isInt ? entry : entry * 100} \r\n                                margin=\"dense\"\r\n                                onChange={event => {\r\n                                    hospBeds[index] = isInt ? event.target.value : (event.target.value / 100);\r\n                                    updateHospBeds(hospBeds);\r\n                                }}\r\n                                endAdornment={!isInt && <InputAdornment position=\"end\">%</InputAdornment>}\r\n                                inputProps={{\r\n                                step: isInt ? 100 : 1,\r\n                                min: 0,\r\n                                type: 'number'\r\n                                }}\r\n                                />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )})\r\n                        }\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    <Row style={{ paddingTop: 10 }}>\r\n                        <Col style={{ textAlign: \"left\" }}><h6>ICU Beds</h6></Col>\r\n                    </Row>\r\n                    <TableContainer>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {ICUBeds.map((entry, index) => {\r\n                            const isInt = index === 0;\r\n                            return (\r\n                            <TableRow>\r\n                                <TableCell style={{ paddingLeft: 0, paddingRight: 0 }}>{ICUTitles[index]}</TableCell>\r\n                                <TableCell align=\"right\" style={{ paddingLeft: 0, paddingRight: 0, width: \"20%\" }}>\r\n                                <Input\r\n                                value={isInt ? entry : entry * 100} \r\n                                margin=\"dense\"\r\n                                onChange={event => {\r\n                                    ICUBeds[index] = isInt ? event.target.value : (event.target.value / 100);\r\n                                    updateICUBeds(ICUBeds);\r\n                                }}\r\n                                fullWidth\r\n                                endAdornment={!isInt && <InputAdornment position=\"end\">%</InputAdornment>}\r\n                                inputProps={{\r\n                                step: isInt ? 100 : 1,\r\n                                min: 0,\r\n                                type: 'number'\r\n                                }}\r\n                                />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )})}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    <Row style={{ paddingTop: 10 }}>\r\n                        <Col style={{ textAlign: \"left\" }}><h6>Ventilators</h6></Col>\r\n                    </Row>\r\n                    <TableContainer>\r\n                    <Table>\r\n                        <TableBody>\r\n                        {ventilators.map((entry, index) => {\r\n                            const is1dp = index === 0;\r\n                            const isInt = index === 1;\r\n                            return (\r\n                            <TableRow>\r\n                                <TableCell style={{ paddingLeft: 0, paddingRight: 0 }}>{ventTitles[index]}</TableCell>\r\n                                <TableCell align=\"right\" style={{ paddingLeft: 0, paddingRight: 0, width: \"20%\" }}>\r\n                                <Input\r\n                                value={isInt || is1dp ? entry : entry * 100} \r\n                                margin=\"dense\"\r\n                                onChange={event => {\r\n                                    ventilators[index] = isInt || is1dp ? event.target.value : (event.target.value / 100);\r\n                                    updateVentilators(ventilators);\r\n                                }}\r\n                                endAdornment={!isInt && !is1dp && <InputAdornment position=\"end\">%</InputAdornment>}\r\n                                fullWidth\r\n                                inputProps={{\r\n                                step: isInt ? 100: is1dp ? 0.1 : 1,\r\n                                min: 0,\r\n                                type: 'number'\r\n                                }}\r\n                                />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )})}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}